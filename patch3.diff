From ab3b0a1a22d9bbc9391bd95ee9ee9e233231aad4 Mon Sep 17 00:00:00 2001
From: klaus triendl <klaus@triendl.eu>
Date: Sun, 24 Apr 2022 13:38:09 +0300
Subject: [PATCH] Use feature detection macros for polyfills

---
 dev/cxx_polyfill.h | 50 +++++++++++++++++++++++++++++-----------------
 dev/type_traits.h  |  2 +-
 2 files changed, 33 insertions(+), 19 deletions(-)

diff --git a/dev/cxx_polyfill.h b/dev/cxx_polyfill.h
index 04b560a..d462a81 100644
--- a/dev/cxx_polyfill.h
+++ b/dev/cxx_polyfill.h
@@ -7,10 +7,25 @@
 namespace sqlite_orm {
     namespace internal {
         namespace polyfill {
-#if __cplusplus < 201703L  // C++14 or earlier
+#if __cpp_lib_void_t >= 201411L
+            using std::void_t;
+#else
+            template<class...>
+            using void_t = void;
+#endif
+
+#if __cpp_lib_bool_constant >= 201505L
+            using std::bool_constant;
+#else
             template<bool v>
             using bool_constant = std::integral_constant<bool, v>;
+#endif
 
+#if __cpp_lib_logical_traits >= 201510L && __cpp_lib_type_trait_variable_templates >= 201510L
+            using std::conjunction, std::conjunction_v;
+            using std::disjunction, std::disjunction_v;
+            using std::negation, std::negation_v;
+#else
             template<typename...>
             struct conjunction : std::true_type {};
             template<typename B1>
@@ -18,7 +33,7 @@ namespace sqlite_orm {
             template<typename B1, typename... Bn>
             struct conjunction<B1, Bn...> : std::conditional_t<bool(B1::value), conjunction<Bn...>, B1> {};
             template<typename... Bs>
-            constexpr bool conjunction_v = conjunction<Bs...>::value;
+            SQLITE_ORM_INLINE_VAR constexpr bool conjunction_v = conjunction<Bs...>::value;
 
             template<typename...>
             struct disjunction : std::false_type {};
@@ -27,30 +42,22 @@ namespace sqlite_orm {
             template<typename B1, typename... Bn>
             struct disjunction<B1, Bn...> : std::conditional_t<bool(B1::value), B1, disjunction<Bn...>> {};
             template<typename... Bs>
-            constexpr bool disjunction_v = disjunction<Bs...>::value;
+            SQLITE_ORM_INLINE_VAR constexpr bool disjunction_v = disjunction<Bs...>::value;
 
-            template<class B>
+            template<typename B>
             struct negation : bool_constant<!bool(B::value)> {};
-
-            template<class...>
-            using void_t = void;
-#else
-            using std::bool_constant;
-            using std::conjunction, std::conjunction_v;
-            using std::disjunction, std::disjunction_v;
-            using std::negation, std::negation_v;
-            using std::void_t;
+            template<typename B>
+            SQLITE_ORM_INLINE_VAR constexpr bool negation_v = negation<B>::value;
 #endif
 
-#if __cplusplus < 202002L  // C++20 or earlier
+#if __cpp_lib_remove_cvref >= 201711L
+            using std::remove_cvref, std::remove_cvref_t;
+#else
             template<class T>
             struct remove_cvref : std::remove_cv<std::remove_reference_t<T>> {};
 
             template<class T>
             using remove_cvref_t = typename remove_cvref<T>::type;
-#else
-            using std::remove_cvref;
-            using std::remove_cvref_t;
 #endif
 
 #if 1  // proposed but not pursued                                                                                     \
@@ -70,7 +77,14 @@ namespace sqlite_orm {
 #else
             using std::is_specialization_of, std::is_specialization_of_t, std::is_specialization_of_v;
 #endif
-#if 1  // library fundamentals TS v2, [meta.detect]
+
+#if 0  // __cpp_lib_detect >= 0L  //  library fundamentals TS v2, [meta.detect]
+            using std::nonesuch;
+            using std::detector;
+            using std::is_detected, std::is_detected_v;
+            using std::detected, std::detected_t;
+            using std::detected_or, std::detected_or_t;
+#else
             struct nonesuch {
                 ~nonesuch() = delete;
                 nonesuch(const nonesuch&) = delete;
diff --git a/dev/type_traits.h b/dev/type_traits.h
index 055004b..070cfea 100644
--- a/dev/type_traits.h
+++ b/dev/type_traits.h
@@ -14,7 +14,7 @@ namespace sqlite_orm {
 
         // enable_if for types
         template<template<typename...> class Op, class... Args>
-        using match_if_not = std::enable_if_t<polyfill::negation<Op<Args...>>::value>;
+        using match_if_not = std::enable_if_t<polyfill::negation_v<Op<Args...>>>;
 
         // enable_if for types
         template<class T, template<typename...> class Primary>
-- 
2.34.1.windows.1

